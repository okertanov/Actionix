// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Monobjc.ScriptingBridge.Chrome {
    using System;
    using Monobjc;
    using Monobjc.Foundation;
    using Monobjc.AppKit;
    using Monobjc.ScriptingBridge;
    
    
    public class ChromeApplication : SBApplication {
        
        public ChromeApplication() {
        }
        
        public ChromeApplication(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBElementArray BookmarkFolders {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "bookmarkFolders");
            }
        }
        
        public virtual SBElementArray Windows {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "windows");
            }
        }
        
        public virtual ChromeBookmarkFolder BookmarksBar {
            get {
                return ObjectiveCRuntime.SendMessage <ChromeBookmarkFolder>(this, "bookmarksBar");
            }
        }
        
        public virtual Boolean Frontmost {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "frontmost");
            }
        }
        
        public virtual NSString Name {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "name");
            }
        }
        
        public virtual ChromeBookmarkFolder OtherBookmarks {
            get {
                return ObjectiveCRuntime.SendMessage <ChromeBookmarkFolder>(this, "otherBookmarks");
            }
        }
        
        public virtual Boolean Exists(Id x) {
            return ObjectiveCRuntime.SendMessage <Boolean>(this, "exists:", x);
        }
        
        public virtual void Open(NSArray x) {
            ObjectiveCRuntime.SendMessage(this, "open:", x);
        }
        
        public virtual void Quit() {
            ObjectiveCRuntime.SendMessage(this, "quit");
        }
    }
    
    public class ChromeWindow : SBObject {
        
        public ChromeWindow() {
        }
        
        public ChromeWindow(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBElementArray Tabs {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "tabs");
            }
        }
        
        public virtual ChromeTab ActiveTab {
            get {
                return ObjectiveCRuntime.SendMessage <ChromeTab>(this, "activeTab");
            }
        }
        
        public virtual NSInteger ActiveTabIndex {
        }
        
        public virtual NSRect Bounds {
        }
        
        public virtual Boolean Closeable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "closeable");
            }
        }
        
        public virtual NSInteger Id {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "id");
            }
        }
        
        public virtual NSInteger Index {
        }
        
        public virtual Boolean Minimizable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "minimizable");
            }
        }
        
        public virtual Boolean Minimized {
        }
        
        public virtual NSString Mode {
        }
        
        public virtual NSString Name {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "name");
            }
        }
        
        public virtual Boolean Presenting {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "presenting");
            }
        }
        
        public virtual Boolean Resizable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "resizable");
            }
        }
        
        public virtual Boolean Visible {
        }
        
        public virtual Boolean Zoomable {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "zoomable");
            }
        }
        
        public virtual Boolean Zoomed {
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual void CopySelection() {
            ObjectiveCRuntime.SendMessage(this, "copySelection");
        }
        
        public virtual void CutSelection() {
            ObjectiveCRuntime.SendMessage(this, "cutSelection");
        }
        
        public virtual void Delete() {
            ObjectiveCRuntime.SendMessage(this, "delete");
        }
        
        public virtual SBObject DuplicateToWithProperties(SBObject to, NSDictionary withProperties) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:withProperties:", to, withProperties);
        }
        
        public virtual void EnterPresentationMode() {
            ObjectiveCRuntime.SendMessage(this, "enterPresentationMode");
        }
        
        public virtual void ExitPresentationMode() {
            ObjectiveCRuntime.SendMessage(this, "exitPresentationMode");
        }
        
        public virtual void GoBack() {
            ObjectiveCRuntime.SendMessage(this, "goBack");
        }
        
        public virtual void GoForward() {
            ObjectiveCRuntime.SendMessage(this, "goForward");
        }
        
        public virtual SBObject MoveTo(SBObject to) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:", to);
        }
        
        public virtual void PasteSelection() {
            ObjectiveCRuntime.SendMessage(this, "pasteSelection");
        }
        
        public virtual void Print() {
            ObjectiveCRuntime.SendMessage(this, "print");
        }
        
        public virtual void Redo() {
            ObjectiveCRuntime.SendMessage(this, "redo");
        }
        
        public virtual void Reload() {
            ObjectiveCRuntime.SendMessage(this, "reload");
        }
        
        public virtual void SaveInAs(NSURL @in, NSString @as) {
            ObjectiveCRuntime.SendMessage(this, "saveIn:as:", @in, @as);
        }
        
        public virtual void SelectAll() {
            ObjectiveCRuntime.SendMessage(this, "selectAll");
        }
        
        public virtual void Stop() {
            ObjectiveCRuntime.SendMessage(this, "stop");
        }
        
        public virtual void Undo() {
            ObjectiveCRuntime.SendMessage(this, "undo");
        }
        
        public virtual void ViewSource() {
            ObjectiveCRuntime.SendMessage(this, "viewSource");
        }
    }
    
    public class ChromeTab : SBObject {
        
        public ChromeTab() {
        }
        
        public ChromeTab(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual NSInteger Id {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "id");
            }
        }
        
        public virtual Boolean Loading {
            get {
                return ObjectiveCRuntime.SendMessage <Boolean>(this, "loading");
            }
        }
        
        public virtual NSString Title {
            get {
                return ObjectiveCRuntime.SendMessage <NSString>(this, "title");
            }
        }
        
        public virtual NSString URL {
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual void CopySelection() {
            ObjectiveCRuntime.SendMessage(this, "copySelection");
        }
        
        public virtual void CutSelection() {
            ObjectiveCRuntime.SendMessage(this, "cutSelection");
        }
        
        public virtual void Delete() {
            ObjectiveCRuntime.SendMessage(this, "delete");
        }
        
        public virtual SBObject DuplicateToWithProperties(SBObject to, NSDictionary withProperties) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:withProperties:", to, withProperties);
        }
        
        public virtual void EnterPresentationMode() {
            ObjectiveCRuntime.SendMessage(this, "enterPresentationMode");
        }
        
        public virtual void ExitPresentationMode() {
            ObjectiveCRuntime.SendMessage(this, "exitPresentationMode");
        }
        
        public virtual void GoBack() {
            ObjectiveCRuntime.SendMessage(this, "goBack");
        }
        
        public virtual void GoForward() {
            ObjectiveCRuntime.SendMessage(this, "goForward");
        }
        
        public virtual SBObject MoveTo(SBObject to) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:", to);
        }
        
        public virtual void PasteSelection() {
            ObjectiveCRuntime.SendMessage(this, "pasteSelection");
        }
        
        public virtual void Print() {
            ObjectiveCRuntime.SendMessage(this, "print");
        }
        
        public virtual void Redo() {
            ObjectiveCRuntime.SendMessage(this, "redo");
        }
        
        public virtual void Reload() {
            ObjectiveCRuntime.SendMessage(this, "reload");
        }
        
        public virtual void SaveInAs(NSURL @in, NSString @as) {
            ObjectiveCRuntime.SendMessage(this, "saveIn:as:", @in, @as);
        }
        
        public virtual void SelectAll() {
            ObjectiveCRuntime.SendMessage(this, "selectAll");
        }
        
        public virtual void Stop() {
            ObjectiveCRuntime.SendMessage(this, "stop");
        }
        
        public virtual void Undo() {
            ObjectiveCRuntime.SendMessage(this, "undo");
        }
        
        public virtual void ViewSource() {
            ObjectiveCRuntime.SendMessage(this, "viewSource");
        }
    }
    
    public class ChromeBookmarkFolder : SBObject {
        
        public ChromeBookmarkFolder() {
        }
        
        public ChromeBookmarkFolder(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual SBElementArray BookmarkFolders {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "bookmarkFolders");
            }
        }
        
        public virtual SBElementArray BookmarkItems {
            get {
                return ObjectiveCRuntime.SendMessage <SBElementArray>(this, "bookmarkItems");
            }
        }
        
        public virtual Id Id {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "id");
            }
        }
        
        public virtual Id Index {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "index");
            }
        }
        
        public virtual NSString Title {
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual void CopySelection() {
            ObjectiveCRuntime.SendMessage(this, "copySelection");
        }
        
        public virtual void CutSelection() {
            ObjectiveCRuntime.SendMessage(this, "cutSelection");
        }
        
        public virtual void Delete() {
            ObjectiveCRuntime.SendMessage(this, "delete");
        }
        
        public virtual SBObject DuplicateToWithProperties(SBObject to, NSDictionary withProperties) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:withProperties:", to, withProperties);
        }
        
        public virtual void EnterPresentationMode() {
            ObjectiveCRuntime.SendMessage(this, "enterPresentationMode");
        }
        
        public virtual void ExitPresentationMode() {
            ObjectiveCRuntime.SendMessage(this, "exitPresentationMode");
        }
        
        public virtual void GoBack() {
            ObjectiveCRuntime.SendMessage(this, "goBack");
        }
        
        public virtual void GoForward() {
            ObjectiveCRuntime.SendMessage(this, "goForward");
        }
        
        public virtual SBObject MoveTo(SBObject to) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:", to);
        }
        
        public virtual void PasteSelection() {
            ObjectiveCRuntime.SendMessage(this, "pasteSelection");
        }
        
        public virtual void Print() {
            ObjectiveCRuntime.SendMessage(this, "print");
        }
        
        public virtual void Redo() {
            ObjectiveCRuntime.SendMessage(this, "redo");
        }
        
        public virtual void Reload() {
            ObjectiveCRuntime.SendMessage(this, "reload");
        }
        
        public virtual void SaveInAs(NSURL @in, NSString @as) {
            ObjectiveCRuntime.SendMessage(this, "saveIn:as:", @in, @as);
        }
        
        public virtual void SelectAll() {
            ObjectiveCRuntime.SendMessage(this, "selectAll");
        }
        
        public virtual void Stop() {
            ObjectiveCRuntime.SendMessage(this, "stop");
        }
        
        public virtual void Undo() {
            ObjectiveCRuntime.SendMessage(this, "undo");
        }
        
        public virtual void ViewSource() {
            ObjectiveCRuntime.SendMessage(this, "viewSource");
        }
    }
    
    public class ChromeBookmarkItem : SBObject {
        
        public ChromeBookmarkItem() {
        }
        
        public ChromeBookmarkItem(System.IntPtr pointer) : 
                base(pointer) {
        }
        
        public virtual NSInteger Id {
            get {
                return ObjectiveCRuntime.SendMessage <NSInteger>(this, "id");
            }
        }
        
        public virtual Id Index {
            get {
                return ObjectiveCRuntime.SendMessage <Id>(this, "index");
            }
        }
        
        public virtual NSString Title {
        }
        
        public virtual NSString URL {
        }
        
        public virtual void Close() {
            ObjectiveCRuntime.SendMessage(this, "close");
        }
        
        public virtual void CopySelection() {
            ObjectiveCRuntime.SendMessage(this, "copySelection");
        }
        
        public virtual void CutSelection() {
            ObjectiveCRuntime.SendMessage(this, "cutSelection");
        }
        
        public virtual void Delete() {
            ObjectiveCRuntime.SendMessage(this, "delete");
        }
        
        public virtual SBObject DuplicateToWithProperties(SBObject to, NSDictionary withProperties) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "duplicateTo:withProperties:", to, withProperties);
        }
        
        public virtual void EnterPresentationMode() {
            ObjectiveCRuntime.SendMessage(this, "enterPresentationMode");
        }
        
        public virtual void ExitPresentationMode() {
            ObjectiveCRuntime.SendMessage(this, "exitPresentationMode");
        }
        
        public virtual void GoBack() {
            ObjectiveCRuntime.SendMessage(this, "goBack");
        }
        
        public virtual void GoForward() {
            ObjectiveCRuntime.SendMessage(this, "goForward");
        }
        
        public virtual SBObject MoveTo(SBObject to) {
            return ObjectiveCRuntime.SendMessage <SBObject>(this, "moveTo:", to);
        }
        
        public virtual void PasteSelection() {
            ObjectiveCRuntime.SendMessage(this, "pasteSelection");
        }
        
        public virtual void Print() {
            ObjectiveCRuntime.SendMessage(this, "print");
        }
        
        public virtual void Redo() {
            ObjectiveCRuntime.SendMessage(this, "redo");
        }
        
        public virtual void Reload() {
            ObjectiveCRuntime.SendMessage(this, "reload");
        }
        
        public virtual void SaveInAs(NSURL @in, NSString @as) {
            ObjectiveCRuntime.SendMessage(this, "saveIn:as:", @in, @as);
        }
        
        public virtual void SelectAll() {
            ObjectiveCRuntime.SendMessage(this, "selectAll");
        }
        
        public virtual void Stop() {
            ObjectiveCRuntime.SendMessage(this, "stop");
        }
        
        public virtual void Undo() {
            ObjectiveCRuntime.SendMessage(this, "undo");
        }
        
        public virtual void ViewSource() {
            ObjectiveCRuntime.SendMessage(this, "viewSource");
        }
    }
}
